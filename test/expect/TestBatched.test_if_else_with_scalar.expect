graph(%a.1_data : Tensor
      %a.1_mask : Tensor
      %a.1_dims : Tensor
      %b_data : Tensor
      %b_mask : Tensor
      %b_dims : Tensor) {
  %6 : int = prim::Constant[value=1]()
  %7 : float = prim::Constant[value=0.1]()
  %8 : Float() = prim::NumToTensor(%7)
  %other : float = prim::TensorToNum(%8)
  %10 : Tensor = aten::gt(%a.1_data, %other)
  %11 : bool = prim::TensorToBool(%10)
  %12 : Long() = prim::NumToTensor(%6)
  %alpha.1 : float = prim::TensorToNum(%12)
  %data.1 : Tensor = aten::add(%a.1_data, %b_data, %alpha.1)
  %mask.1 : Tensor = aten::mul(%a.1_mask, %b_mask)
  %dims.1 : Tensor = aten::__or__(%a.1_dims, %b_dims)
  %17 : Long() = prim::NumToTensor(%6)
  %alpha : float = prim::TensorToNum(%17)
  %data : Tensor = aten::sub(%a.1_data, %b_data, %alpha)
  %mask : Tensor = aten::mul(%a.1_mask, %b_mask)
  %dims : Tensor = aten::__or__(%a.1_dims, %b_dims)
  %22 : bool = prim::Constant[value=1]()
  %23 : int = prim::Constant[value=1]()
  %24 : Tensor = aten::type_as(%a.1_mask, %10)
  %data.2 : Tensor = aten::mul(%10, %24)
  %26 : int = aten::dim(%data.2)
  %27 : bool = aten::eq(%26, %23)
  %cond_data : Tensor, %cond_mask : Tensor = prim::If(%27)
    block0() {
      %30 : int = aten::dim(%data.1)
      %31 : int = aten::sub(%30, %23)
      %data.4 : Tensor = prim::Loop(%31, %22, %data.2)
        block0(%33 : int, %34 : Tensor) {
          %35 : int = aten::dim(%34)
          %data.3 : Tensor = aten::unsqueeze(%34, %35)
          -> (%22, %data.3)
        }
      %cond_data.1 : Tensor = aten::expand_as(%data.4, %data.1)
      %cond_mask.1 : Tensor = aten::expand_as(%data.4, %mask.1)
      -> (%cond_data.1, %cond_mask.1)
    }
    block1() {
      -> (%data.2, %data.2)
    }
  %res_data : Tensor = aten::where(%cond_data, %data.1, %data)
  %res_mask : Tensor = aten::where(%cond_mask, %mask.1, %mask)
  %res_dims : Tensor = aten::__or__(%dims.1, %dims)
  return (%res_data, %res_mask, %res_dims);
}
